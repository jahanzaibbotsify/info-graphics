const fs = require('fs');
const path = require('path');
const { PNG } = require('pngjs');
const Jimp = require('jimp');

async function extractFramesFromSprite(inputPath, outputDir) {
  const data = fs.readFileSync(inputPath);
  const png = PNG.sync.read(data);
  const { width, height, data: pixels } = png;

  const visited = new Array(width * height).fill(false);
  const frames = [];

  function getIndex(x, y) {
    return (width * y + x) * 4;
  }

  function isTransparent(x, y) {
    const idx = getIndex(x, y);
    return pixels[idx + 3] === 0;
  }

  function bfs(x, y) {
    const queue = [[x, y]];
    let minX = x, maxX = x, minY = y, maxY = y;

    while (queue.length) {
      const [cx, cy] = queue.shift();
      const idx = cy * width + cx;
      if (visited[idx]) continue;
      visited[idx] = true;

      if (isTransparent(cx, cy)) continue;

      minX = Math.min(minX, cx);
      maxX = Math.max(maxX, cx);
      minY = Math.min(minY, cy);
      maxY = Math.max(maxY, cy);

      for (const [dx, dy] of [[0,1],[1,0],[-1,0],[0,-1]]) {
        const nx = cx + dx;
        const ny = cy + dy;
        if (nx >= 0 && ny >= 0 && nx < width && ny < height) {
          queue.push([nx, ny]);
        }
      }
    }

    const frameWidth = maxX - minX + 1;
    const frameHeight = maxY - minY + 1;
    if (frameWidth < 20 || frameHeight < 20) return null; // Ignore small noise

    return { x: minX, y: minY, width: frameWidth, height: frameHeight };
  }

  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const idx = y * width + x;
      if (!visited[idx] && !isTransparent(x, y)) {
        const box = bfs(x, y);
        if (box) frames.push(box);
      }
    }
  }

  console.log(`Detected ${frames.length} frames`);

  const jimpImg = await Jimp.read(inputPath);
  await fs.promises.mkdir(outputDir, { recursive: true });

  for (let i = 0; i < frames.length; i++) {
    const f = frames[i];
    const frame = jimpImg.clone().crop(f.x, f.y, f.width, f.height);
    await frame.writeAsync(path.join(outputDir, `frame_${i + 1}.png`));
  }

  return frames;
}

module.exports = extractFramesFromSprite; 